@page "/search"
@inject NavigationManager NavManager
@inject Data.DataCart DataCart
@using pleaseWork.Data
@using Models
@using Newtonsoft.Json;

<MudTextField @bind-Value="@search_text" @onkeydown="@Enter" Label="Search" Variant="Variant.Filled"></MudTextField>
<div id="search-button">
    @*<MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="beginSearch">Search</MudButton>*@
</div>
@*HelperText="@results_text"*@

<MudTabs Elevation="2" Rounded="true" Centered="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Produce">
        <MudGrid Spacing="2" Class="mt-2" Justify="Justify.Center">
            @if (Products == null || Products.Count == 0)
            {
                <MudText Typo="Typo.body2">No results found.</MudText>
            }
            else
            {
                for(var i = 0; i < Products.Count; i++)
                {
                    <MudItem>
                        <MudCard Elevation="10" Height="180px" Width="172px">
                            <MudPaper Height="110px" Width="172px" />
                            <MudCardContent>
                                <MudText>Products[@i]name</MudText>
                                <MudText Typo="Typo.body2">Products[@i]price</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Farmers">
        <MudGrid Spacing="2" Class="mt-2" Justify="Justify.Center">
            @if (Farmers == null || Farmers.Count == 0)
            {
                <MudText Typo="Typo.body2">No results found.</MudText>
            }
            else
            {
                for (var i = 0; i < Farmers.Count; i++)
                {
                    <MudItem>
                        <MudCard Elevation="10" Height="180px" Width="172px">
                            <MudPaper Height="110px" Width="172px" />
                            <MudCardContent>
                                <MudText>Farmers[@i].name</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    public string TextValue { get; set; }
    public List<Product> Products { get; set; }
    public List<string> Farmers { get; set; }
    private DataCart.Item[] items;
    private MudTheme Theme = new MudTheme();

    string search_text = "";
    string results_text = "";

    //String[] items = { "Apples", "Bananas", "Carrots", "Apples", "Cherries" };

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            int results_count = 0;
            for (int i = 0; i < items.Length; i++)
            {
                if (items[i].name == search_text)
                {
                    
                }
            }

            if (results_count == 0)
            {
                results_text = "No results found for " + search_text;
            }
            else if (results_count == 1)
            {
                results_text = results_count + " result for " + search_text;
            }
            else
            {
                results_text = results_count + " results for " + search_text;
            }
        }
    }

    private void toProduct()
    {
        //Console.WriteLine(s);
        NavManager.NavigateTo("/product");
    }

    public DataCart.Item[] getCart()
    {
        return DataCart.getCart2();
    }

    private async Task SearchProducts()
    {
        HttpClient client = new HttpClient { BaseAddress = new Uri("https://farmersmercato.azurewebsites.net/api/search") };

        HttpResponseMessage response = null;
        response = await client.GetAsync(client.BaseAddress);

        var data = await response.Content.ReadAsStringAsync();
        dynamic accounts = JsonConvert.DeserializeObject(data);

        foreach (var account in accounts)
        {
            Products.Add(account.inventory);
        }

        return;
    }

    private async Task SearchFarmers()
    {
        HttpClient client = new HttpClient { BaseAddress = new Uri("https://farmersmercato.azurewebsites.net/api/search") };

        HttpResponseMessage response = null;
        response = await client.GetAsync(client.BaseAddress);

        var data = await response.Content.ReadAsStringAsync();
        dynamic accounts = JsonConvert.DeserializeObject(data);

        foreach (var account in accounts)
        {
            Farmers.Add(account.name);
        }

        return;
    }

    protected override async Task OnInitializedAsync()
    {
        items = await DataCart.getCart();
        // await SearchProducts();
        // await SearchFarmers();
    }
}