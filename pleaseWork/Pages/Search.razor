@page "/search"
@inject NavigationManager NavManager
@inject Data.DataCart DataCart
@using pleaseWork.Data
@using Models
@using Newtonsoft.Json;
@inject IDialogService DialogService

<MudTextField @bind-Value="@search_text" @onkeydown="@Enter" Label="Search" Variant="Variant.Filled"></MudTextField>

<MudTabs Elevation="2" Rounded="true" Centered="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Produce">
        <MudGrid Spacing="2" Class="mt-2" Justify="Justify.Center">
            @if (Products == null || Products.Count == 0)
            {
                <MudText Typo="Typo.body2">No results found.</MudText>
            }
            else
            {
                foreach (Models.Product product in Products)
                {
                    <MudItem>
                        <MudCard>
                            <MudCardMedia Image="images/carrots.jpg" Height="200" />
                            <MudCardContent>
                                <MudText Typo="Typo.h5">@product.name</MudText>
                                <MudText Typo="Typo.body2">@product.price</MudText>
                                <MudText Typo="Typo.body2">@product.seller</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="@(()=>AddtoCart(product))">Add to Cart</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Farmers">
        <MudGrid Spacing="2" Class="mt-2" Justify="Justify.Center">
            @if (Farmers == null || Farmers.Count == 0)
            {
                <MudText Typo="Typo.body2">No results found.</MudText>
            }
            else
            {
                foreach (var farmer in Farmers)
                {
                    <MudItem>
                        <MudCard>
                            <MudCardMedia Image="images/carrots.jpg" Height="200" />
                            <MudCardContent>
                                <MudText Typo="Typo.h5" @bind-Value="NameTextValue">@farmer</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    public string NameTextValue { get; set; }

    public List<Models.Product> Products = new List<Models.Product>();
    public List<string> Farmers = new List<string>();
    private MudTheme Theme = new MudTheme();

    string search_text = "";

    private async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await OnInitializedAsync();
        }
    }

    private async Task<List<Models.Product>> SearchProducts(string search_text)
    {
        HttpClient client = new HttpClient { BaseAddress = new Uri("https://farmersmercato.azurewebsites.net/api/search-products") };

        HttpResponseMessage response = null;
        response = await client.GetAsync(client.BaseAddress);

        var data = await response.Content.ReadAsStringAsync();

        List<Models.Product> products = new List<Models.Product>();
        products = JsonConvert.DeserializeObject<List<Models.Product>>(data);

        if (search_text != "")
        {
            List<Models.Product> filteredProducts = new List<Models.Product>();

            foreach (Models.Product product in products)
            {
                if (product.name.ToLower().Contains(search_text.ToLower()))
                {
                    filteredProducts.Add(product);
                }
            }

            products = filteredProducts;
        }

        return products;
    }

    private async Task<List<string>> SearchFarmers(string search_text)
    {
        HttpClient client = new HttpClient { BaseAddress = new Uri("https://farmersmercato.azurewebsites.net/api/search-farmers") };

        HttpResponseMessage response = null;
        response = await client.GetAsync(client.BaseAddress);

        var data = await response.Content.ReadAsStringAsync();
        dynamic accounts = JsonConvert.DeserializeObject(data);

        List<string> farmers = new List<string>();

        foreach (var account in accounts)
        {
            if (search_text == "")
            {
                farmers.Add((string)account.name);
            }
            else
            {
                if (account.name.ToString().ToLower().Contains(search_text.ToLower()))
                {
                    farmers.Add((string)account.name);
                }
            }
        }

        return farmers;
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddtoCartDialog>("Product added to cart", options);
    }

    private async Task AddtoCart(Models.Product inProduct)
    {
        HttpClient client = new HttpClient { BaseAddress = new Uri("https://farmersmercato.azurewebsites.net/api/add-to-cart") };

        HttpResponseMessage response = null;

        var product = new Models.Product()
        {
            name = inProduct.name,
            price = inProduct.price,
            seller = inProduct.seller,
            image = inProduct.image,
        };

        var payloadString = new StringContent(System.Text.Json.JsonSerializer.Serialize(product), System.Text.Encoding.UTF8, System.Net.Mime.MediaTypeNames.Application.Json);

        response = await client.PostAsync(client.BaseAddress, payloadString);

        OpenDialog();
    }

    protected override async Task OnInitializedAsync()
    {
        Products = await SearchProducts(search_text);
        Farmers = await SearchFarmers(search_text);
    }
}

<style>
    #farmer-nav-bar {
        visibility: hidden;
    }

    #seller {
        visibility: hidden;
    }
</style>
